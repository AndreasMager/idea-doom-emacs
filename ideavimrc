" -*- mode: vimrc -*-

let mapleader = " "

set clipboard+=unnamed
set commentary
set history
set ignorecase
set matchpairs
set multiple-cursors
set number
set relativenumber
set smartcase
set surround
set wrapscan
" IdeaVim only
set ideajoin=true
set idearefactormode=visual
set ideavimsupport=

" Search project
map <Leader>/ <Action>(FindInPath)
" Find file
map <Leader>. <Action>(SearchEverywhere)
" Jump to bookmark
map <Leader><CR> <Action>(Bookmarks)
" Switch buffer
map <Leader>\< <Action>(Switcher)
" Switch to last buffer
map <Leader>` <Action>(GoToLastTab)
" Toggle last popup
map <Leader>~ <Action>(JumpToLastWindow)

" doom-escape-hook
nnoremap <Esc> :<C-u>nohl<CR>:<C-u>action HideAllWindows<CR><Esc>
" evil-escape
imap jk <Esc>

" Close all folds
nmap zm <Action>(CollapseAllRegions)
" Open all folds
nmap zr <Action>(ExpandAllRegions)

" Insert newline above
nnoremap [<Space> O<Esc>j
vnoremap [<Space> <Esc>O<Esc>j
" Insert newline below
nnoremap ]<Space> o<Esc>k
vnoremap ]<Space> <Esc>o<Esc>k


"
" +buffer

" Switch workspace buffer
map <leader>bb <Action>(RecentFiles)
" Kill buffer
map <Leader>bd <Action>(CloseContent)
" Kill buffer
map <Leader>bk <Action>(CloseContent)
" Save buffer
noremap <Leader>bs :<C-u>w<CR>
" Kill all buffers
map <Leader>bK <Action>(CloseAllEditors)
" New empty buffer
map <Leader>bN <Action>(NewScratchBuffer)
" Kill other buffers
map <Leader>bO <Action>(CloseAllEditorsButActive)
" Save all buffers
noremap <Leader>bS :<C-u>wa<CR>


"
" +code

" Jump to references
map <Leader>cD <Action>(ShowUsages)
" Execute code action
map <Leader>ca <Action>(ShowIntentionActions)
" Compile
map <Leader>cc <Action>(CompileDirty)
" Jump to definition
noremap <Leader>cd gd
" Format buffer/region
nmap <Leader>cf <Action>(ReformatCode)
" Find implementations
map <Leader>ci <Action>(GotoImplementation)
" Jump to symbol in current workspace
map <Leader>cj <Action>(SearchEverywhere)
" Jump to documentation
map <Leader>ck <Action>(QuickJavaDoc)
" Organize imports
map <Leader>co <Action>(OptimizeImports)
" Rename
map <Leader>cr <Action>(RenameElement)
" Find type definition
map <Leader>ct <Action>(GotoTypeDeclaration)
" Recompile
map <Leader>cC <Action>(Compile)

" Show error description
map <C-c>!h <Action>(ShowErrorDescription)
" Go to previous error
nmap [e <Action>(GotoPreviousError)
nmap <C-c>!p <Action>(GotoPreviousError)
" Go to next error
nmap ]e <Action>(GotoNextError)
nmap <C-c>!n <Action>(GotoNextError)

" Go to previous method
nmap [[ <Action>(MethodUp)
" Go to next method
nmap ]] <Action>(MethodDown)


"
" +file

" Open project editorconfig
map <Leader>fc <Action>(NewEditorConfigFile)
" Find file
map <Leader>ff <Action>(SearchEverywhere)
" Recent files
map <Leader>fr <Action>(RecentFiles)
" Save file
noremap <Leader>fs :<C-u>w<CR>
" Yank (copy) filename
map <Leader>fy <Action>(CopyAbsolutePath)
" Rename/move file
map <Leader>fR <Action>(RefactoringMenu)


"
" +git

" Jump to previous hunk
nmap <Leader>g[ <Action>(VcsShowPrevChangeMarker)
" Jump to next hunk
nmap <Leader>g] <Action>(VcsShowNextChangeMarker)
" Switch branch
map <Leader>gb <Action>(Git.Branches)
map <Leader>gg <Action>(Git.Menu)
" Revert hunk
map <Leader>gr <Action>(Vcs.RollbackChangedLines)
" Blame
map <Leader>gB <Action>(Annotate)
" Fetch
map <Leader>gF <Action>(Git.Fetch)
" Git stage file
map <Leader>gS <Action>(Git.Add)

" +create
" Pull request
map <Leader>gcp <Action>(Github.Create.Pull.Request)

" +list
" List pull requests
map <Leader>glp <Action>(Github.View.Pull.Request)

" +open
" Browse file or region
map <Leader>goo <Action>(Github.Open.In.Browser)
" Browse a pull request
map <Leader>gop <Action>(com.github.shiraji.findpullrequest.action.FindPullRequestAction)

nmap [d <Action>(VcsShowPrevChangeMarker)
nmap ]d <Action>(VcsShowNextChangeMarker)


"
" +help

map <Leader>he <Action>(ActivateEventLogToolWindow)


"
" +insert

" Insert emoji (or unicode)
nmap <Leader>ie <Action>(EmojiAndSymbols)
imap <A-Space>ie <Action>(EmojiAndSymbols)
" Insert snippet (Live Template)
nmap <Leader>is <Action>(InsertLiveTemplate)
imap <A-Space>is <Action>(InsertLiveTemplate)
" Insert unicode (or emoji)
nmap <Leader>iu <Action>(EmojiAndSymbols)
imap <A-Space>iu <Action>(EmojiAndSymbols)
" Insert from clipboard
nmap <Leader>iy <Action>(PasteMultiple)
imap <A-Space>iy <Action>(PasteMultiple)


"
" +open
noremap <Leader>op :<C-u>NERDTreeToggle<CR>
noremap <Leader>oP :<C-u>NERDTreeFind<CR>


"
" +project

" Run cmd in project root
map <Leader>p! <Action>(RunAnything)
" Invalidate project cache
map <Leader>pi <Action>(InvalidateCaches)
" Switch projects
map <Leader>pp <Action>(ManageRecentProjects)
" List project todos
map <Leader>pt <Action>(ActivateTODOToolWindow)
" List project tasks
map <Leader>pz <Action>(RunAnything)
" Run project
map <Leader>pR <Action>(Run)


"
" +toggle

" Big mode (Presentation Mode)
map <Leader>tb <Action>(TogglePresentationMode)
" Line numbers
map <Leader>tl <Action>(EditorToggleShowLineNumbers)
" Read-only mode
map <Leader>tr <Action>(ToggleReadOnlyAttribute)
" Soft line wrapping
map <Leader>tw <Action>(EditorToggleUseSoftWraps)
" Zen mode (Distraction Free Mode)
map <Leader>tz <Action>(ToggleDistractionFreeMode)
" Frame fullscreen
map <Leader>tF <Action>(ToggleFullScreen)


"
" +search

" Search project
map <Leader>sp <Action>(FindInPath)


"
" +window

noremap <Leader>wc <C-w>c
noremap <Leader>wd <C-w>c
noremap <Leader>wh <C-w>h
noremap <Leader>wj <C-w>j
noremap <Leader>wk <C-w>k
noremap <Leader>wl <C-w>l
noremap <Leader>ws <C-w>s
noremap <Leader>wv <C-w>v
noremap <Leader>ww <C-w>w
noremap <Leader>wW <C-w>W
" Maximize window
noremap <Leader>wm <Action>(Unsplit)


"
" Emulated plugins

" easymotion
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_startofline = 0
set easymotion
map gsb <Plug>(easymotion-bl)
map gse <Plug>(easymotion-el)
map gsf <Plug>(easymotion-f)
map gsF <Plug>(easymotion-F)
map gsj <Plug>(easymotion-j)
map gsk <Plug>(easymotion-k)
map gsn <Plug>(easymotion-n)
map gsN <Plug>(easymotion-N)
map gss <Plug>(easymotion-s2)
map gst <Plug>(easymotion-t)
map gsT <Plug>(easymotion-T)
map gsw <Plug>(easymotion-wl)
map gsge <Plug>(easymotion-gel)

" NERDTree
let g:NERDTreeMapActivateNode = 'l'
let g:NERDTreeMapPreview = '<Nop>'
let g:NERDTreeMapOpenInTab = 'oo'
let g:NERDTreeMapOpenInTabSilent = '<Nop>'
let g:NERDTreeMapOpenSplit = 'oh'
let g:NERDTreeMapPreviewSplit = '<Nop>'
let g:NERDTreeMapOpenVSplit = 'ov'
let g:NERDTreeMapPreviewVSplit = '<Nop>'
let g:NERDTreeMapOpenRecursively = '<Nop>'
let g:NERDTreeMapCloseDir = 'h'
let g:NERDTreeMapCloseChildren = '<Nop>'
let g:NERDTreeMapJumpRoot = '<Nop>'
let g:NERDTreeMapJumpParent = 'K'
let g:NERDTreeMapJumpFirstChild = '<Nop>'
let g:NERDTreeMapJumpLastChild = '<Nop>'
let g:NERDTreeMapJumpNextSibling = 'L'
let g:NERDTreeMapJumpPrevSibling = 'H'
let g:NERDTreeMapRefresh = '<Nop>'
let g:NERDTreeMapRefreshRoot = 'gr'
let g:NERDTreeMapMenu = '<Nop>'
" let g:NERDTreeMapQuit = 'q'
let g:NERDTreeMapToggleZoom = '<Nop>'
set NERDTree
